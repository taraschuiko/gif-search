{"version":3,"sources":["components/Header.jsx","components/SearchField.jsx","components/SearchResults.jsx","components/Main.jsx","components/App.jsx","serviceWorker.js","index.js","assets/logo.svg"],"names":["Header","react_default","a","createElement","className","src","logo","alt","SearchField","key","this","props","search","_this","type","placeholder","value","searchText","onChange","e","handleSearchTextChange","target","onKeyPress","handleInputEnterPress","onClick","React","Component","SearchResults","lib_default","updateOnEachImageLoad","options","results","map","result","index","Main","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","setState","prevState","objectSpread","_this2","length","fetch","concat","API_URL","API_KEY","method","headers","Content-Type","Accept","then","r","json","data","gif","push","images","downsized_medium","url","SearchField_SearchField","App","Main_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.2887d3ec.chunk.js","sourcesContent":["import React from \"react\";\nimport logo from \"../assets/logo.svg\";\n\nexport default function() {\n  return (\n    <header className=\"App-header\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col App-logo-container\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1>Gif Search</h1>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","import React from \"react\";\n\nexport default class SearchField extends React.Component {\n  handleInputEnterPress(key) {\n    if (key === \"Enter\") {\n      this.props.search();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"SearchField row\">\n        <input\n          type=\"text\"\n          placeholder=\"Search...\"\n          value={this.props.searchText}\n          onChange={e => this.props.handleSearchTextChange(e.target.value)}\n          className=\"col-8 col-md-10\"\n          onKeyPress={e => this.handleInputEnterPress(e.key)}\n        />\n        <button onClick={this.props.search} className=\"col-4 col-md-2\">\n          Search\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Masonry from \"react-masonry-component\";\n\nexport default function(props) {\n  return (\n    <Masonry updateOnEachImageLoad={true} options={{}}>\n      {props.results.map((result, index) => (\n        <div className=\"grid-item\" key={index}>\n          <img src={result} className=\"result-image\" alt={props.searchText} />\n        </div>\n      ))}\n    </Masonry>\n  );\n}\n","import React from \"react\";\nimport SearchField from \"./SearchField\";\nimport SearchResults from \"./SearchResults\";\nimport { API_URL, API_KEY } from \"./App\";\n\nexport default class Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSearchTextChange = this.handleSearchTextChange.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  state = {\n    searchText: \"\",\n    results: []\n  };\n\n  handleSearchTextChange(searchText) {\n    this.setState(prevState => ({\n      ...prevState,\n      searchText\n    }));\n  }\n\n  search() {\n    if (this.state.searchText.length > 0) {\n      fetch(`${API_URL}search?q=${this.state.searchText}&api_key=${API_KEY}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      })\n        .then(r => r.json())\n        .then(r => {\n          this.setState(prevState => ({\n            ...prevState,\n            results: []\n          }));\n          let results = [];\n          r.data.map(gif => results.push(gif.images.downsized_medium.url));\n          this.setState(prevState => ({\n            ...prevState,\n            results\n          }));\n        });\n    }\n  }\n\n  render() {\n    return (\n      <main className=\"App-main\">\n        <div className=\"container\">\n          <SearchField\n            searchText={this.state.searchText}\n            handleSearchTextChange={this.handleSearchTextChange}\n            search={this.search}\n          />\n          <SearchResults\n            results={this.state.results}\n            searchText={this.state.searchText}\n          />\n        </div>\n      </main>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\nexport const API_KEY = \"UEf49JA3Xnc8KTcjMpUNZOUt7i2ZbOiD\";\nexport const API_URL =\n  \"https://cors-anywhere.herokuapp.com/api.giphy.com/v1/gifs/\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}